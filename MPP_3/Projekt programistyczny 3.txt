Specyfikacja programu "Jednowarstwowa siec neuronowa":

Dane wejściowe (należy samemu przygotować):

1. Stworzyć zadany katalog na dane.

2. W zadanym katalogu tworzymy kilka (K = 3) podkatalogów
nazwanych nazwami języków (np. czeski, słowacki ...)

3. W każdym z nich umieszczamy po kilka tekstów
trenujących ściągniętych np. z Wikipedii w odpowiednich językach (w alfabetach łacińskich).
(Z praktyki wynika, że wystarcza nawet mniej 10 tekstów uczących dla każdego języka, ale długości, chociaż 2 akapity)

4. W momencie uruchomienia sieć perceptronów będzie używała tych tekstów jako dane trenujące.

Opis programu:

Użyjemy 1-warstwowej sieci neuronowej do klasyfikowania języków
naturalnych test.

Bierzemy dokument w dowolnym języku (w alfabecie łacińskim) z pliku ".txt",
wyrzucamy wszystkie znaki poza literami alfabetu angielskiego (ascii) i
przerabiamy na 26-elementowy wektor proporcji liter (czyli: jaka jest
proporcja 'a', 'b', etc.)

Okazuje się, z taki wektor rozkładu znaków wystarcza do rozróżniania
języka naturalnego dokumentu tekstowego, nawet dla tak podobnych języków,
jak np. czeski i słowacki.

Tworzymy wiec 1 warstwę K perceptronów (gdzie K to liczba języków, weźmy
ze K = 3 języki) i uczymy każdy perceptron rozpoznawania "jego" język.

Uczenie perceptronów przebiega jak w poprzednim projekcie, tzn. z dyskretną (0-1) funkcją aktywacji.

Mając wyuczony każdy z perceptronów, klasyfikacji do jednej z K klas dokonujemy, używając "maximum selector"
(zdjąć dyskretna funkcje aktywacji) i normalizować zarówno wektor wag, jak i wejść.

UWAGA: przy normalizacji można użyć miary euklidesowej. 
Normalizując wektor wag, nie dokładamy do niego parametru progu (theta).

Zapewnić okienko tekstowe do testowania: po nauczeniu wklejamy dowolny
nowy tekst w danym języku i sprawdzamy, czy siec prawidłowo go klasyfikuje.

Oczywiście w momencie pisania programu nie powinno byc wiadome ile i jakie
beda języki.

Nie można używać żadnych bibliotek ML, wszystko ma byc zaimplementowane od
zera w pętlach, if'ach, odległość tez sam ma liczyć, używając działań
arytmetycznych (do operacji na liczbach można używać java.lang.Math), etc.
Można używać java.util.